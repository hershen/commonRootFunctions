#include "MVectorTemplate.h"

#include <iostream>
#include "TF1.h"
#include "TMath.h"
#include "TH1D.h"
#include "mathFuncs.h"
#include "TFitResult.h"


#include "TCanvas.h"

//For TMiuit2
// #include "Math/Minimizer.h"
// #include "Math/Factory.h"
// #include "Math/Functor.h"

MVectorTemplate::MVectorTemplate():
  rNumAveragedFuncs(0), 
  rDx(0.), 
  rTemplateValues(std::vector<double>()),
  bAmplitudeFitEnabled(true),
  bPedestalFitEnabled(true),
  rTF1(TF1()),
  rNumPointsForSTD(300),
  rPeakIdx_FirstVector(0),
  rDebugLevel(0)
{

}

void MVectorTemplate::setTF1ParNames()
{
  rTF1.SetParName(0,"Amplitude");
  rTF1.SetParName(1,"Pedestal");
  rTF1.SetParName(2,"TimeShift");
}


void MVectorTemplate::resetTemplateValues()
{
  rTemplateValues = std::vector<double>(); 
  rNumAveragedFuncs = 0;
  rTF1 = TF1();
}

void MVectorTemplate::resetTemplateRange()
{
  if(rTF1.IsValid()) rTF1.SetRange(0,rDx*(rTemplateValues.size()-1) );
}

void MVectorTemplate::setDx(const double &newDx)
{
  rDx = newDx;
  resetTemplateRange();
}

int MVectorTemplate::addVector(const std::vector<double> &newVector, const double &std)
{
  //TODO implement with TMinuit
  
  // ------------------------------------------------------------------
  //   //Sanity checks
  // ------------------------------------------------------------------
  if(newVector.empty() )
  {
    std::cerr << "MVectorTemplate::addVector: Error - trying to add empty vector. Not adding. " << std::endl;
    return -1;    
  }
  
  if(std < 0 )
  {
    std::cerr << "MVectorTemplate::addVector: Error - negative standard deviation (" << std << "). Not adding. " << std::endl;
    return -2;    
  }
  
  
  // ------------------------------------------------------------------
  //Set first vector as template, normalize, etc.
  // ------------------------------------------------------------------
  if(rNumAveragedFuncs == 0) //First vector added
  {

    // ------------------------------------------------------------------
    //Take pedestal as first entry
    // ------------------------------------------------------------------
    double pedestal = newVector[0];

    // ------------------------------------------------------------------
    //Search for maximum (and what idx it is at - for later guessing the time shift) of newVector so peak can be normalized
    // ------------------------------------------------------------------
    double maximum = -DBL_MAX;
    for(size_t idx = 0; idx < newVector.size(); ++idx)
    {
      if(newVector[idx] > maximum)
      {
	maximum = newVector[idx];
	rPeakIdx_FirstVector = idx;
      }
    }
    double maxMinusPedestal = maximum - pedestal;
    // ------------------------------------------------------------------
    //Populate rTemplateValues, normalizing and subtracting pedestal
    // ------------------------------------------------------------------
    rTemplateValues = std::vector<double>(newVector.size());
    for(size_t idx = 0; idx < newVector.size(); ++idx)
    {
      rTemplateValues[idx] = (newVector[idx] - pedestal)/maxMinusPedestal;
    }
    
    if (rDebugLevel > 10)
    {
      std::cout << "pedestal = " << pedestal << ", maximum = " << maximum << std::endl;
      for(size_t iTemplateIdx = 0; iTemplateIdx < rTemplateValues.size(); ++iTemplateIdx)
	std::cout << "temp[" << iTemplateIdx << "] = " << rTemplateValues[iTemplateIdx] << std::endl;
    }
    
    // ------------------------------------------------------------------
    //Create TF1
    // ------------------------------------------------------------------
    rTF1 = TF1("templateTF1",this,&MVectorTemplate::TF1Eval,0,rDx*(rTemplateValues.size()-1),3,"MVectorTemplate","TF1Eval");
    setTF1ParNames();
    rTF1.SetParameters(1.,0.,0.);
  }//First vector added
  
  else //from second vector
  {
    
    //Standard deviation vector
    std::vector<double> stdVector(newVector.size(),std);
    
    //Histrogram of with entries of newVector - used to fit the template
    //Center of each bin corresponds to correct x value (that's why there's a -rDx/2. term)
    TH1D fitHist("fitHist","fitHist", newVector.size(), -rDx/2. , newVector.size() * rDx - rDx/2.);
    for(unsigned int idx = 1; idx <= newVector.size(); ++idx)
    {
      fitHist.SetBinContent(idx,newVector[idx-1]);
      fitHist.SetBinError(idx,std);
    }
    
    // ------------------------------------------------------------------
    //Initial guesses for fit
    // ------------------------------------------------------------------
    //Amplitude initial guess is the value of newVector where the template maximum is. This will not work for fast varying functions, or if the xShift is large
    double amplitudeGuess = newVector[rPeakIdx_FirstVector] / rTemplateValues[rPeakIdx_FirstVector];   
    double pedestalGuess = newVector[0];
    double xShiftGuess   = 0;
    
    if(bAmplitudeFitEnabled) rTF1.SetParameter(0, amplitudeGuess);
    else rTF1.FixParameter(0, amplitudeGuess);
    
    if(bPedestalFitEnabled) rTF1.SetParameter(1, pedestalGuess);
    else rTF1.FixParameter(1, pedestalGuess);
    
    rTF1.SetParameter(2, xShiftGuess);
    
//     rTF1.SetParLimits(2,-20,20);
    
//     rTF1.FixParameter(2, xShiftGuess);
    
    std::cout << "amplitudeGuess = " << amplitudeGuess << ",  pedestalGuess= " << pedestalGuess << ", xShiftGuess = " << xShiftGuess << std::endl;
    
    
    // ------------------------------------------------------------------
    //Fit!
    // ------------------------------------------------------------------
    TFitResultPtr fitResult = fitHist.Fit(&rTF1,"SM");
    
    // ------------------------------------------------------------------
    //Fit result checks
    // ------------------------------------------------------------------
    //TODO implement!
    
    
    
    TCanvas * c1 = new TCanvas("c1","c1",10,10,700,700);
    fitHist.Draw();
    rTF1.Draw("SAME");
    c1->SaveAs("can.png");
    
    // ------------------------------------------------------------------
    //Positive fittedXshift means newVector is forward in time relative to rTemplateValues, i.e. newVector[idx] = rTemplateValues[idx-fittedXshift/rDx]
    // ------------------------------------------------------------------
    double fittedAmplitude = fitResult->Parameter(0);
    double fittedPedistal = fitResult->Parameter(1);
    double fittedXshift = fitResult->Parameter(2);
    
    // ------------------------------------------------------------------
    //Average template with new waveform
    //x corresponding to newVector[0] is - fittedXshift (with minus!!)
    //x corresponding to newVector[size] is size*rDx - fittedXshift
    // ------------------------------------------------------------------
//     size_t firstIdx = 0, lastIdx = 0;
//     long binShift = 0;
//     if(fittedXshift > 0)
//     {
//       firstIdx = 0;
//       lastIdx = newVector.size() - (fittedXshift / rDx) - 1; //  ===  (newVector.size() * rDx - fittedXshifted) / rDx;
//       binShift = fittedXshift / rDx + 1;
//       std::cout << "lastIDx = " << lastIdx << ", binShift = " << binShift << std::endl;
//     }
//     else
//     {
//       firstIdx = (-fittedXshift) / rDx + 1;
//       lastIdx = rTemplateValues.size() - 1; //last element
//       binShift = - firstIdx;
//       std::cout << "firstIdx = " << firstIdx << ", binShift = " << binShift << std::endl;
//     }

    // ------------------------------------------------------------------
    //Average newVector with template
    // ------------------------------------------------------------------
    for(size_t iTemplateIdx = 0; iTemplateIdx < rTemplateValues.size(); ++iTemplateIdx)
    {
      double effectiveX = iTemplateIdx * rDx - fittedXshift;  //effectiveX corresponds to x=iTemplateIdx * rDx in new vector after it has been shifted.
      long floor_newVectorIdx = long(effectiveX / rDx); //Index in new vector corresponding to floor(effectiveX)
  

      if(floor_newVectorIdx < 0) continue; //rTemplateValues[iTemplateIdx] = (rTemplateValues[iTemplateIdx]*double(rNumAveragedFuncs))/double(rNumAveragedFuncs+1);
      else if(size_t(floor_newVectorIdx) > newVector.size() - 1) break; // -2)	rTemplateValues[iTemplateIdx] = rTemplateValues[iTemplateIdx]*double(rNumAveragedFuncs)/double(rNumAveragedFuncs+1);

      else
      {
	//Linear interpolation
	double x1 = double(floor_newVectorIdx)*rDx, x2 = double(floor_newVectorIdx + 1) * rDx;
	double y1 = newVector[floor_newVectorIdx], y2 = newVector[floor_newVectorIdx + 1];
      
	double effectiveNewVectorValue = (y2 - y1)/(x2-x1)*(effectiveX-x1) + y1;
	
	effectiveNewVectorValue = (effectiveNewVectorValue - fittedPedistal) / fittedAmplitude;
	
	if (rDebugLevel > 50)
	  std::cout << "x1 = " << x1 << ", x2 = " << x2 << ", y1 = " << y1 << ", y2 = " << y2 << ",  effectiveNewVectorValue = " << effectiveNewVectorValue << std::endl;
	
	rTemplateValues[iTemplateIdx] = (rTemplateValues[iTemplateIdx]*double(rNumAveragedFuncs) + effectiveNewVectorValue)/double(rNumAveragedFuncs+1);
      }
      if (rDebugLevel > 10)
	std::cout << "floor_newVectorIdx = " << floor_newVectorIdx << ", temp[" << iTemplateIdx << "] = " << rTemplateValues[iTemplateIdx] << std::endl;
    }
    
    
    // ------------------------------------------------------------------
    //Clip ends of template
    //x corresponding to newVector[0] is - fittedXshift (with minus!!)
    //x corresponding to newVector[size] is size*rDx - fittedXshift
    // ------------------------------------------------------------------
    if(fittedXshift > 0)
    {
      rTemplateValues.resize( newVector.size() - (fittedXshift / rDx)); //  ===  (newVector.size() * rDx - fittedXshifted) / rDx;
      resetTemplateRange();
    }
    else
    {
      rTemplateValues.erase( rTemplateValues.begin() , rTemplateValues.begin() + (-fittedXshift) / rDx );
      resetTemplateRange();
    }
    
  }
  
  ++rNumAveragedFuncs;
  rTF1.SetParameters(1,0,0);
  return 0;
}

void MVectorTemplate::enableAmplitudeFit(const bool &enableAmplitudeFit)
{
  bAmplitudeFitEnabled = enableAmplitudeFit;
  if(rTF1.IsValid())
  {
    if(enableAmplitudeFit) rTF1.SetParameter(0, rTF1.GetParameter(0));
    else rTF1.FixParameter(0, rTF1.GetParameter(0));
  }
}


void MVectorTemplate::enablePedestalFit(const bool &enablePedestalFit) 
{
  bPedestalFitEnabled = enablePedestalFit;
  if(rTF1.IsValid())
  {
    if(enablePedestalFit) rTF1.SetParameter(1, rTF1.GetParameter(1));
    else rTF1.FixParameter(1, rTF1.GetParameter(1));
  }
}

double MVectorTemplate::TF1Eval(double *var, double *params) 
{
//   double amplitude = params[0];
//   double pedistal = params[1];
//   double xShift = params[2];
  double effectiveX = var[0] - params[2]; 
  
//         cout << "amplitude = " << amplitude << ", pedistal = " << pedistal << ", xShift = " << xShift << ", x = " << var[0] << ", effectiveX = " << effectiveX << ". ";
  
  if(effectiveX <= 0) return params[1] + params[0]*rTemplateValues[0];
  if(effectiveX >= rDx * double(rTemplateValues.size() - 1)) return params[1] + params[0]*rTemplateValues.back();
  
  int idx = int(effectiveX / rDx);

  //Linear interpolation
  double x1 = double(idx)*rDx, x2 = double(idx + 1) * rDx;
//     cout << "vec[idx + 1] = " << vec[idx + 1];
  double y1 = rTemplateValues[idx], y2 = rTemplateValues[idx + 1];
  
//     std::cout << "idx = " << idx << ", x1 = " << x1 << ", y1 = " << y1 << ". x2 = " << x2 << ", y2 = " << y2 << std::endl;
//   double effY = (y2 - y1)/(x2-x1)*(effectiveX-x1) + y1;
  
  double returnVal = params[1] + params[0]*((y2 - y1)/(x2-x1)*(effectiveX-x1) + y1);
  
//     std::cout << "returnVal = " << returnVal << std::endl;
  return returnVal;    
}

